package publish.subscribe.parser;

import java.net.Inet4Address;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Collections;

import json.node.CommunicationListener;
import json.parser.JsonParserInterface;

public class Server implements ServerInterface{
	private AsyncReceiver asyncReceiver;
	private JsonServerParserInterface parser;
	private String myIPaddress;
	private String myID;
	
	public Server(){
		try {
			clientIP = getMyIp();
		} catch (SocketException e) {
			e.printStackTrace();
		}
		// TODO: Get client's ID
		clientID = "ExampleID";
		myID = "ExampleServerID";
		myIPaddress = "ExampleServerIP";
		asyncReceiver = new AsyncReceiver();
		parser = new JsonServerParser(this);
	}

	@Override
	public void sendJson(String json, String clientIP) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void start() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getIP() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getID() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void addListener(CommunicationListener listener) {
		// TODO Auto-generated method stub
		
	}
	
	public static String getMyIp() throws SocketException {

		return Collections.list(
				NetworkInterface.getNetworkInterfaces()).stream()
				.flatMap(i -> Collections.list(i.getInetAddresses()).stream())
				.filter(ip -> ip instanceof Inet4Address && ip.isSiteLocalAddress())
				.findFirst().orElseThrow(RuntimeException::new).getHostAddress();
	}
}
